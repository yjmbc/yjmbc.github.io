<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Electron on YJMBC Blog</title>
    <link>https://yjmbc.github.io/tags/electron/</link>
    <description>Recent content in Electron on YJMBC Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 15 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://yjmbc.github.io/tags/electron/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>编译和反编译</title>
      <link>https://yjmbc.github.io/work/asar/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://yjmbc.github.io/work/asar/</guid>
      <description>electron 项目安装之后，目录结构里有一个 resources 文件夹，文件夹里面有一个 app.asar 文件，这个文件相当于打包好了以后的 electron 项目的压缩文件。 下载 @electron/asar 包之后，进入 resources 文件夹下 asar extract app.asar ./app 这个命令会还原 项目打包之后的样子 然后理论上修改这个压缩包里的内容，再通过编译会 app.asar 文件，就可以实现对项目的更改 asar pack ./app app.asar 但是出于安全起见，打包的时候可以给文件加上签名，有了签名之后修改项目里的内容，都会导致签名失效。</description>
    </item>
    <item>
      <title>Electron 主进程 渲染进程</title>
      <link>https://yjmbc.github.io/learn/electron-communication/</link>
      <pubDate>Wed, 19 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://yjmbc.github.io/learn/electron-communication/</guid>
      <description>electron 实际上是 chromium浏览器环境 + node环境 + 原生api的环境&#xA;但三种环境在electron里不是哪里都可以用的，他把js分成了主进程环境和渲染进程环境 每个 Electron 应用都有一个单一的主进程，作为应用程序的入口点。 主进程在 Node.js 环境中运行，这意味着它具有 require 模块和使用所有 Node.js API 的能力,也拥有访问原生api的能力&#xA;等到渲染进程就不再拥有这个能力了，所以有preload,他在页面加载之前执行，在这里仍然拥有访问node的能力。 语境隔离（Context Isolation）意味着预加载脚本与渲染器的主要运行环境是隔离开来的，以避免泄漏任何具特权的 API 到您的网页内容代码中。就是说preload中挂在window上的内容在渲染进程里访问不到&#xA;那如果要在渲染的页面里面拿到preload里定义的方法，这个时候就可以使用contextBridge 进程间通信 https://www.electronjs.org/zh/docs/latest/tutorial/ipc&#xA;渲染进程发，主进程听（单向） preload 里 ipcRenderer.send html页面里面，调用window上的api里注册的方法，就是preload里面注册的方法名字 main.js 里 ipcMain.on监听&#xA;渲染进程发，主进程听完返回，相互通信（双向） preload里 ipcRenderer.invoke() html页面里面，调用上面的方法，同样在window上 main.js里面ipcMain.handle()&#xA;主进程发，渲染进程听 main.js里面 mainWindow.webContents.send mainWindow就是渲染进程实例 然后再preload里面进行 ipcRenderer.on听 最后再页面上 调用preload里面定义的方法，做逻辑处理&#xA;如果这里想要通信回去，就在页面上调用的方法里面，再调用一个方法发送给主进程&#xA;两个渲染器进程 之能拿主进程做中转</description>
    </item>
  </channel>
</rss>
