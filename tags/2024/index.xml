<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2024 on YJMBC Blog</title>
    <link>https://yjmbc.github.io/tags/2024/</link>
    <description>Recent content in 2024 on YJMBC Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 25 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://yjmbc.github.io/tags/2024/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>uniapp app 端通过webview引入外部 js ， webview 与 app 通信</title>
      <link>https://yjmbc.github.io/work/uniapp-webview/</link>
      <pubDate>Wed, 25 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://yjmbc.github.io/work/uniapp-webview/</guid>
      <description>背景 用户登录需要接入腾讯的无感验证，在 index.html 文件里引入 js 文件是不生效的。查看官网相关内容，app 引入只支持 webview 的形式，因为他的 js 文件里面会用到浏览器里的变量，因此就算下载到本地引入也无法使用。&#xA;当前项目已经使用 uniapp 完成了 h5 的相关内容，包含登录页。所以 app 端只需要用 webview 引入 h5 页面。&#xA;如果没有 h5 端，则需要在 放在特定目录下进行访问 web-view | uni-app 官网 (dcloud.net.cn)&#xA;所以最终的方案就是，登录页组件判断当前环境如果是 app 则使用 webview 加载 h5 登录页地址，并且携带参数用于告知是从 app 页跳转过来。&#xA;网页可以正常使用引入 js 文件，这里判断没有引入的话 创建一个 script 元素进行加载&#xA;const script = document.createElement(&amp;#34;script&amp;#34;); script.src = xxxxxxxxxx; document.head.appendChild(script); script.onload = () =&amp;gt; { xxxxxxxxxxxxx; }; 登录成功过后 webview 和 app 通信返回用户信息&#xA;主要问题 本地调试 uniapp 修改 h5 代码之后我希望直接把 localhost:8080 的页面放到 webview 的 地址里进行调试，但是 app 的页面会报错显示无法访问。</description>
    </item>
    <item>
      <title>vue3 自定义指令 点击空白处隐藏</title>
      <link>https://yjmbc.github.io/work/vue3-directive-clickoutside/</link>
      <pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://yjmbc.github.io/work/vue3-directive-clickoutside/</guid>
      <description>注册：&#xA;// main.js import directives from &amp;#34;./util/directives&amp;#34;; const app = createApp(App); app.use(router).use(store).use(directives).mount(&amp;#34;#app&amp;#34;); 使用：&#xA;&amp;lt;div v-clickOutSide=&amp;#34;{ callback: () =&amp;gt; (showModal = false), except: [&amp;#39;.showModalButton&amp;#39;], }&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 指令：&#xA;// derectives.js // 自定义指令点击非自身事件（空白处） // 使用的时候需要传递 对象 // { // callback: 点击的时候回调的函数, // except: [&amp;#39;&amp;#39;,&amp;#39;&amp;#39;] 里面传递选择器，表示点击这里的时候不用理会 // } const clickOutSide = { created(el, binding) { function documentHandler(e) { // 如果点击的是元素自己或者在排除的元素里面则不触发回调函数 if ( el.contains(e.target) || binding.value.except.some( (item) =&amp;gt; document.querySelector(item) &amp;amp;&amp;amp; document.querySelector(item).contains(e.target) ) ) return false; if (binding.</description>
    </item>
    <item>
      <title>编译和反编译</title>
      <link>https://yjmbc.github.io/work/asar/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://yjmbc.github.io/work/asar/</guid>
      <description>electron 项目安装之后，目录结构里有一个 resources 文件夹，文件夹里面有一个 app.asar 文件，这个文件相当于打包好了以后的 electron 项目的压缩文件。 下载 @electron/asar 包之后，进入 resources 文件夹下 asar extract app.asar ./app 这个命令会还原 项目打包之后的样子 然后理论上修改这个压缩包里的内容，再通过编译会 app.asar 文件，就可以实现对项目的更改 asar pack ./app app.asar 但是出于安全起见，打包的时候可以给文件加上签名，有了签名之后修改项目里的内容，都会导致签名失效。</description>
    </item>
    <item>
      <title>Markdown 语法学习</title>
      <link>https://yjmbc.github.io/learn/markdown/</link>
      <pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://yjmbc.github.io/learn/markdown/</guid>
      <description>标题语法 # h1 ## h2 以此类推 到6 记得有空格 内容 ====== 表示h1 内容 ------ 表示h2 = / - 数量任意 ### 内容 {#id的名字} =》 &amp;lt;h3 id=&amp;#34;id的名字&amp;#34;&amp;gt;内容&amp;lt;/h3&amp;gt; 好像有的不支持 段落 空行空出来就分段了&#xA;换行 结尾空格&#xA;字体样式 **加粗内容** __加粗内容__ *斜体* _斜体_ ***粗体且斜体*** ___粗体且斜体___ 引用 &amp;gt;引用内容 &amp;gt; &amp;gt;放在一段里面的引用内容 &amp;gt; &amp;gt;&amp;gt;引用里面引用 列表 有序列表 1. 内容 2. 内容 数字+. 前面数字是啥无所谓，但一定要是1开始 无序列表 - 列表 * 列表 + 列表 + 缩进列表 三个符号都可以 代码 代码&#xA;分隔线 内容 ************** -------------- ______________ * - _ 都可以作为分隔符 a标签语法 [a标签显示内容](链接地址 &amp;quot;title&amp;quot;)e.</description>
    </item>
    <item>
      <title>Electron 主进程 渲染进程</title>
      <link>https://yjmbc.github.io/learn/electron-communication/</link>
      <pubDate>Wed, 19 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://yjmbc.github.io/learn/electron-communication/</guid>
      <description>electron 实际上是 chromium浏览器环境 + node环境 + 原生api的环境&#xA;但三种环境在electron里不是哪里都可以用的，他把js分成了主进程环境和渲染进程环境 每个 Electron 应用都有一个单一的主进程，作为应用程序的入口点。 主进程在 Node.js 环境中运行，这意味着它具有 require 模块和使用所有 Node.js API 的能力,也拥有访问原生api的能力&#xA;等到渲染进程就不再拥有这个能力了，所以有preload,他在页面加载之前执行，在这里仍然拥有访问node的能力。 语境隔离（Context Isolation）意味着预加载脚本与渲染器的主要运行环境是隔离开来的，以避免泄漏任何具特权的 API 到您的网页内容代码中。就是说preload中挂在window上的内容在渲染进程里访问不到&#xA;那如果要在渲染的页面里面拿到preload里定义的方法，这个时候就可以使用contextBridge 进程间通信 https://www.electronjs.org/zh/docs/latest/tutorial/ipc&#xA;渲染进程发，主进程听（单向） preload 里 ipcRenderer.send html页面里面，调用window上的api里注册的方法，就是preload里面注册的方法名字 main.js 里 ipcMain.on监听&#xA;渲染进程发，主进程听完返回，相互通信（双向） preload里 ipcRenderer.invoke() html页面里面，调用上面的方法，同样在window上 main.js里面ipcMain.handle()&#xA;主进程发，渲染进程听 main.js里面 mainWindow.webContents.send mainWindow就是渲染进程实例 然后再preload里面进行 ipcRenderer.on听 最后再页面上 调用preload里面定义的方法，做逻辑处理&#xA;如果这里想要通信回去，就在页面上调用的方法里面，再调用一个方法发送给主进程&#xA;两个渲染器进程 之能拿主进程做中转</description>
    </item>
    <item>
      <title>小狗钱钱-入门第一本</title>
      <link>https://yjmbc.github.io/readothers/finance-first/</link>
      <pubDate>Wed, 19 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://yjmbc.github.io/readothers/finance-first/</guid>
      <description>前提 毕业以后我的工资全部都存在工商银行的卡里，一般默认存进去的钱自动存活期，但是今年五月发现并没有，所以萌生了理财的想法。&#xA;余额宝里目前有一些钱，然后就是把上面工商的钱存了定期，但是利率1.7有点低。理财产品看不懂，想先找一本书来看看，听说小狗钱钱可以入门。&#xA;读书笔记 72定律&#xA;72 除以投资的年收益率的百分比，得出的数字就是这笔钱翻一倍所要的年数&#xA;72公式也可以用来帮助我们计算通货膨胀。它可以告诉我们，在一定通货膨胀率下，我们的钱在多长时间后会贬值一半。&#xA;比如按72除以3%的通货膨胀率计算，得到24，就是说24年以后，你的钱只值现在的一半。&#xA;记录 书里还提到一个观点时金钱不能使人变得幸福，幸福的人得到金钱会变得更加幸福，但是悲惨的人不会因为得到金钱而变得幸福。感觉很有道理，幸福的能力是自己给的，金钱固然能提升人的生活质量但是幸福的能力还是要靠自己来创造。&#xA;书中对基金的概念也有了一个比较清晰易懂的介绍，基金是经理人受限要求购买至少二十种股票，然后把风险平坦，保证最终受益。书中的观点是行业都会迎来低谷期，但只有低谷期不卖出，就不会亏损，然后总会迎来行业回暖。&#xA;书中主角对自己的财产进行了比例划分来进行管理，她将50%作为会下单的鹅，可持续发展，钱生钱。40%作为梦想基金来实现目标，所以在最开始就设立了要实现的目标。10%作为消费。&#xA;我以前总是会把前面这90%搞混在一起，看起来好像没什么区别，但是风险小了，收益也小了。很多时候目标是攒钱，但是10%的界限又会越过，所以一个清晰的比例也有助于我对自己的钱有一个比较清晰的掌控。 我和主角的比例可能不太一样，我目前对理财有了一个大概的基础认知，算是入门了，我还要再学习一下相关知识。</description>
    </item>
    <item>
      <title>hugo 实践记录</title>
      <link>https://yjmbc.github.io/work/hugo-start/</link>
      <pubDate>Fri, 14 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://yjmbc.github.io/work/hugo-start/</guid>
      <description>安装 https://gohugo.io/installation/windows/直接用 scoop 安装最方便 go 安装msi文件运行就可以了&#xA;新建 hugo new site [网站名字]&#xA;挑选一个主题 https://themes.gohugo.io/&#xA;git submodule add [主题的github地址]&#xA;在 hugo.toml 里面定义主题 theme = &#39;主题名字&#39;&#xA;hugo server 启动&#xA;hugo server -D 预览&#xA;新建文章 hugo new content posts/my-first-post.md&#xA;hugo 打包文件 会放到 public 目录下面&#xA;github page 创建一个仓库 命名 username.github.io 然后把远程仓库拉到本地 git clone 远程仓库 把上面 public 目录下的所有文件复制过来 提交 推送远程仓库 访问 username.github.io hugo.toml 文件 # 设置默认语言为简体中文 defaultContentLanguage = &amp;#39;zh-cn&amp;#39; # 要注意配置文件的 url 要更改成github page的路径！！！ baseURL = &amp;#39;https://yjmbc.</description>
    </item>
  </channel>
</rss>
