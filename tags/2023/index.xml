<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2023 on YJMBC Blog</title>
    <link>https://yjmbc.github.io/tags/2023/</link>
    <description>Recent content in 2023 on YJMBC Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 15 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://yjmbc.github.io/tags/2023/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>阻止用户debugger</title>
      <link>https://yjmbc.github.io/collections/debugger/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://yjmbc.github.io/collections/debugger/</guid>
      <description>ai出来的时候我打开了文心一言和星火的控制台，两者的处理方式也不太一样&#xA;文心一言是循环无限debugger 但是这个只要禁止debugger就可以了&#xA;星火处理的很好，一开始我以为他监控了窗口大小，可视区域一旦变小，说明有人打开了控制台，然后就跳转到白页，但是我把控制台放到打开的新窗口仍然会跳走。 后来在网上找到了监控cpu使用量，一打开就会检测到变化，然后迅速跳到白页。&#xA;为了防止这个变化不明显，星火用 console.table 方法在控制台打印了很多表格。&#xA;但是这种监控的方式实际上是和刚打开的时候的处理效率进行对比，所以文章里面也提到了，如果用户打开着控制台进入，这个方法就会失效。&#xA;有一个相关文章 https://blog.guya.net/2014/06/20/how-to-know-when-chrome-console-is-open/ https://blog.guya.net/chrome/dev_tools/</description>
    </item>
    <item>
      <title>拖拽实现记录</title>
      <link>https://yjmbc.github.io/work/drag/</link>
      <pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://yjmbc.github.io/work/drag/</guid>
      <description>一 反馈按钮 1 使用 drag event 来实现 主要思路： dragstart 的时候设置定时器隐藏原本的按钮 不然隐藏之后无法触发 dragstart 事件 drag 期间修改鼠标的样式，原本默认是 copy 的鼠标样式 dragend 的时候获取鼠标的位置，设置 style.top ，定时器恢复按钮的显示&#xA;实践发现，完全使用 drag event 不用针对点击事件进行额外的处理，拖拽流程也很流畅，但是如果不采用全屏都是可拖拽区域的写法，拖拽的时候会出现明显的回弹，为了避免回弹，使用全屏都是可拖拽区域的方法，又会导致鼠标的 copy 样式无法完全隐藏，（可以隐藏，但是偶尔太快拖动的时候会出现）这个问题在拖拽库中也可以观察到，例如: http://alloyteam.github.io/AlloyFinger/ 所以出于这一点的原因不采用 drag event 来实现&#xA;2 使用 mouse event 来实现 主要思路： 仿造 touch 事件来完成（ 这里的距离计算和下面vconsole中的计算方式是一样的 ） mousedown 的时候 记录鼠标的初始位置坐标 同时在 document 上重写 mouseup mousemove 事件&#xA;button.onmousedown = (e) =&amp;gt; { e.preventDefault(); // 记录鼠标点下去的开始位置 button.setAttribute(&amp;#39;startX&amp;#39;, `${e.clientX || 0}`); button.setAttribute(&amp;#39;startY&amp;#39;, `${e.clientY || 0}`); // 同时修改 mouseup mousemove 事件 document.</description>
    </item>
    <item>
      <title>Vue2 -&gt; Vue3</title>
      <link>https://yjmbc.github.io/learn/vue-diff/</link>
      <pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://yjmbc.github.io/learn/vue-diff/</guid>
      <description>api 风格 选项式api 组合式api 组合式api 生命周期钩子对比 vue2 vue3 beforeCreate / created setup beforeMount onBeforeMount mounted onMounted beforeUpdate onBeforeUpdate updated onUpdated beforeDestroy onBeforeUnmount destroyed onUnmounted setup(props, context) { // Attribute (非响应式对象，等同于 $attrs) context.attrs // 插槽 (非响应式对象，等同于 $slots) context.slots // 触发事件 (方法，等同于 $emit) context.emit // 暴露公共 property (函数) context.expose return {} } 响应式 对象和数组的动态变化 const data = { name: &amp;#39;aa&amp;#39;, id: 001, information: { tel: &amp;#39;111xxxxx123&amp;#39;, email: &amp;#39;12xxxxx@xx.com&amp;#39; } } data.id = { number: 001 }; ✅ data.</description>
    </item>
    <item>
      <title>Vue3 React</title>
      <link>https://yjmbc.github.io/learn/vue3-react/</link>
      <pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://yjmbc.github.io/learn/vue3-react/</guid>
      <description>vue3 流程 1 预处理 头头尾尾 2 新增节点 oldEnd &amp;lt; j 成立，说明在预处理时，所有旧子节点都处理完毕了 newEnd &amp;gt;= j 成立，说明预处理后，新的一组子节点中，存在未被处理的节点，这些节点就是新增的节点 3 删除节点 oldend &amp;gt;= j 存在未被处理的节点 newend &amp;lt; j 新节点 已经都处理过了 4 重新编号之前，最长递增子序列对应的是 新节点在旧节点列表中的为止 而编号之后，最长递增子序列对应的是 具体的节点&#xA;最长增长子序列 动态 贪心+二分 得到正确顺序的核心是记录前驱节点 React fiber 1 流程 JS 是单线程的，浏览器是多线程的 对于多线程的浏览器而言，它除了要处理 JS这个线程，它还要处理定时器，网络请求，UI渲染&amp;hellip;这些线程。 问题：浏览器中JS线程与UI线程互斥，假设这段代码运行的时间很久，那么浏览器就必须一直等待，严重情况下浏览器还可能失去响应 Fiber vs Stack Demo&#xA;卡顿，掉帧 人眼：24帧/秒 递归 dom 树&#xA;2 fiber 从运行机制上来解释，fiber是一种流程让出机制，它能让react中的同步渲染进行中断，并将渲染的控制权让回浏览器，从而达到不阻塞浏览器渲染的目的。 从数据角度来解释，fiber能细化成一种数据结构，或者一个执行单元。 传统： fiber： 数据结构：&#xA;const fiber = { stateNode,// dom节点实例 child,// 当前节点所关联的子节点 sibling,// 当前节点所关联的兄弟节点 return// 当前节点所关联的父节点 } 这样设计的好处就是在数据层已经在不同节点的关系给描述了出来，即便某一次任务被终止，当下次恢复任务时，这种结构也利于react恢复任务现场，知道自己接下来应该处理哪些节点。</description>
    </item>
  </channel>
</rss>
